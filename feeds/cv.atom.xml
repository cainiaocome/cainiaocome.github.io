<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jlz's blog - CV</title><link href="/" rel="alternate"></link><link href="/feeds/cv.atom.xml" rel="self"></link><id>/</id><updated>2020-10-08T00:00:00+08:00</updated><subtitle></subtitle><entry><title>Some of my projects, tools and scripts</title><link href="/some-of-my-projects-tools-and-scripts.html" rel="alternate"></link><published>2020-10-08T00:00:00+08:00</published><updated>2020-10-08T00:00:00+08:00</updated><author><name>jlz</name></author><id>tag:None,2020-10-08:/some-of-my-projects-tools-and-scripts.html</id><summary type="html">&lt;h3&gt;HTTP traffic index engine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;design and implement an HTTP request hash algorithm to filter similar HTTP request(from penetration testing perspective)&lt;/li&gt;
&lt;li&gt;design and implement a web page structural clustering algorithm to filter similar web page(from penetration testing perspective)&lt;/li&gt;
&lt;li&gt;design and implement a crawler-based on these two algorithms to index â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;HTTP traffic index engine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;design and implement an HTTP request hash algorithm to filter similar HTTP request(from penetration testing perspective)&lt;/li&gt;
&lt;li&gt;design and implement a web page structural clustering algorithm to filter similar web page(from penetration testing perspective)&lt;/li&gt;
&lt;li&gt;design and implement a crawler-based on these two algorithms to index HTTP traffic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web attack detection using Machine Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;collect web attack payloads, including SQL injection payloads, XSS payloads, command injection payloads, XXE payloads, some other RCE payloads like s2-045, and normal HTTP traffic&lt;/li&gt;
&lt;li&gt;test multiple different Machine Learning classification algorithms' false-positive rate and false-negative rate, implemented the most efficient and acceptable model&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;high-frequency futures trading bot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;implement order imbalance algorithm&lt;/li&gt;
&lt;li&gt;test on multiple futures instruments, some work, some not&lt;/li&gt;
&lt;li&gt;working on implementing high market access&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;leetcode problem Python solutions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;many leetcode problems' Python solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;LD_PRELOAD based user-space educational Linux rootkit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;can hide file, process, user&lt;/li&gt;
&lt;li&gt;supports both 32-bit and 64-bit system calls&lt;/li&gt;
&lt;li&gt;works on all distributions&lt;/li&gt;
&lt;li&gt;works on all kernel versions(since it is user-space, no need to worry about kernel versions)&lt;/li&gt;
&lt;li&gt;cons: does not work for statically linked binaries&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;captcha solver using Deep Learning(based on LSTM and CTC loss)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;tried years to do this using traditional computer vision algorithms, well, results were not good&lt;/li&gt;
&lt;li&gt;after deep learning evolved to a more mature stage and CTC loss was introduced, solved it in no time&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python source code obfuscation tool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;parse abstract syntax tree(it is very easy to do this in Python)&lt;/li&gt;
&lt;li&gt;manipulate tree node, like, split a meaningful string to multiple meaningless numbers, add no-op code, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;multiple POCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;multiple struts2 RCE pocs&lt;/li&gt;
&lt;li&gt;solr RCE poc&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;fast and secure file transfer tool in a high packet loss environment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;password protected upload point&lt;/li&gt;
&lt;li&gt;segment file into chunks&lt;/li&gt;
&lt;li&gt;multi-thread transfer&lt;/li&gt;
&lt;li&gt;packet timeout and re-transfer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gnome desktop environment init tool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;convenient and flexible&lt;/li&gt;
&lt;li&gt;run commands in gnome-terminal&lt;/li&gt;
&lt;li&gt;Chrome, telegram, nautilus, atom, calibre, bitwarden&lt;/li&gt;
&lt;li&gt;some GUI automation helpers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;quantitative trading utils&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;time and time range utils&lt;/li&gt;
&lt;li&gt;plot volume and price&lt;/li&gt;
&lt;li&gt;load,clean,transform tick data&lt;/li&gt;
&lt;li&gt;sample history data&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python script "compile" tool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"compile" a script to a one-file binary using pyinstaller&lt;/li&gt;
&lt;li&gt;clean up intermediate files&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;youtube music library no-copyright-music downloader&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;parse youtube music library web page and API request&lt;/li&gt;
&lt;li&gt;extract no-copyright-music URLs&lt;/li&gt;
&lt;li&gt;download and save to files&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;others&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;tmux session init tool&lt;/li&gt;
&lt;li&gt;cloudflare nodes latency test and record tool&lt;/li&gt;
&lt;li&gt;videos to music converting tool&lt;/li&gt;
&lt;li&gt;PE(portable executable) analysis tool&lt;/li&gt;
&lt;li&gt;v2ray config generation tool&lt;/li&gt;
&lt;li&gt;Internet speed test and record tool&lt;/li&gt;
&lt;li&gt;backup automation tool&lt;/li&gt;
&lt;li&gt;time series data animation tool&lt;/li&gt;
&lt;li&gt;markdown to pdf automation tool&lt;/li&gt;
&lt;li&gt;GPA calculation tool&lt;/li&gt;
&lt;li&gt;video process automation tool&lt;/li&gt;
&lt;/ul&gt;</content><category term="CV"></category></entry></feed>